SECRET MANAGEMENT
-------------------

Issues:
------

While perusing through code we saw three major issues where the passwords were exposed as part of the application code/
Dockerfile. These issues are as follows:

    1. MySQL password in GiftcardSite/k8/django-deploy.yaml
       The password MySQL password 'thisisatestthing.' is exposed in django-deploy.yaml. Though half the job was done
       right by picking the password from the environment variable rather that in the source code. However, this pass
       is exposed in the k8 yaml file when it is passed as the env variable with name: MYSQL_ROOT_PASSWORD and value:
       'thisisatestthing.'.

    2. MySQL password in db/k8/db-deployment.yaml
       This issue is same as above where the MySQL password 'thisisatestthing.' is exposed as the value of the env
       variable MYSQL_ROOT_PASSWORD in the db-deployment.yaml

    3. SECRET_KEY exposed in the GiftcardSite/GiftcardSite/settings.py
       The SECRET_KEY for the database encryption is exposed in the application code as a plaintext, making it
       vulnerable and easier for anyone to access the encrypted data.

Fixes:
------

    1. Fix for MySQL password exposure in GiftcardSite/k8/django-deploy.yaml
       Since the MySQL password is already being accessed via the env variable 'MYSQL_ROOT_PASSWORD', we make a slight
       change so that it is not exposed in the yaml. For this, we generated a kubectl secret 'my-sql-user' using the
       following command:

       kubectl create secret generic my-sql-user --from-literal=my-sql-user='thisisatestthing.'

       Then we changed the yaml using the 'valueFrom:' so that we can access the secret that we generated above while
       defining the env var 'MYSQL_ROOT_PASSWORD'.

              - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-sql-user
                  key: my-sql-user

    2. Fix for MySQL password exposure in db/k8/db-deployment.yaml
       We made a similar change as above in db-deployment.yaml to access the env variable 'MYSQL_ROOT_PASSWORD' from the
       secret generated. We use the same secret that was generated using the command above and the same changes are made
       while defining the env variable in the yaml.

    3. Fix for exposure in the GiftcardSite/GiftcardSite/settings.py
       We made changes on the similar lines here as well. We first changed the SECRET_KEY to be fetched from an env
       variable 'DB_SECRET_KEY'. We then created the kubectl secret 'db-secret-key' to fetch the value for this env
       variable using the following command:

       kubectl create secret generic db-secret-key --from-literal=db-secret-key='kmgysa#fz+9(z1*=c0ydrjizk*7sthm2ga1z4=^61$cxcq8b$l'

       Then we changed the yaml to add another env variable 'DB_SECRET_KEY' in the django-deploy.yaml and its value is
       fetched using the 'valueFrom:' so that we can access the secret that we generated while defining the env var
       'DB_SECRET_KEY'.

              - name: DB_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: db-secret-key
                  key: db-secret-key